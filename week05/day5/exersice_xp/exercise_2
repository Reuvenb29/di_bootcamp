-- üß™ EXERCISE 2 - DVD RENTAL FULL SQL SCRIPT --

-- ‚úÖ 1. UPDATE the language of some films
-- Make sure you use a valid language_id from the language table
UPDATE film
SET language_id = 2 -- Example: Assume 2 = Italian
WHERE film_id IN (1, 2, 3); -- Change to any valid film IDs you want

-- ‚úÖ 2. Check foreign keys on the customer table
-- This will list all foreign key constraints
SELECT
    conname AS constraint_name,
    confrelid::regclass AS references_table
FROM pg_constraint
WHERE conrelid = 'customer'::regclass AND contype = 'f';

-- üß† Explanation:
-- The customer table has foreign keys on:
-- - address_id ‚Üí references address(address_id)
-- - store_id   ‚Üí references store(store_id)
-- This means any INSERT must use valid address_id and store_id that already exist.

-- ‚úÖ 3. Drop the customer_review table (if it exists)
-- Use CASCADE if it has dependencies, or just drop normally if not
DROP TABLE IF EXISTS customer_review CASCADE;

-- ‚úÖ 4. Find how many rentals are still outstanding
SELECT COUNT(*) AS outstanding_rentals
FROM rental
WHERE return_date IS NULL;

-- ‚úÖ 5. 30 most expensive movies that are still outstanding
SELECT f.title, f.replacement_cost, r.rental_date
FROM rental r
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE r.return_date IS NULL
ORDER BY f.replacement_cost DESC
LIMIT 30;

-- ‚úÖ 6. Help your friend find the 4 mystery films

-- üé¨ Film #1: About a sumo wrestler + Actor Penelope Monroe
SELECT f.film_id, f.title, f.description
FROM film f
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor a ON fa.actor_id = a.actor_id
WHERE a.first_name = 'Penelope' AND a.last_name = 'Monroe'
AND f.description ILIKE '%sumo%';

-- üé¨ Film #2: Short documentary, rated R, < 60 minutes
SELECT title, description, length, rating
FROM film
WHERE length < 60 AND rating = 'R';

-- üé¨ Film #3: Rented by Matthew Mahan, paid > $4, returned between July 28 and Aug 1, 2005
SELECT f.title, p.amount, r.return_date
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN payment p ON r.rental_id = p.rental_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE c.first_name = 'Matthew' AND c.last_name = 'Mahan'
AND p.amount > 4
AND r.return_date BETWEEN '2005-07-28' AND '2005-08-01';

-- üé¨ Film #4: Watched by Matthew Mahan, includes ‚Äúboat‚Äù in title or description, high replacement cost
SELECT DISTINCT f.title, f.description, f.replacement_cost
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE c.first_name = 'Matthew' AND c.last_name = 'Mahan'
AND (f.title ILIKE '%boat%' OR f.description ILIKE '%boat%')
ORDER BY f.replacement_cost DESC;
